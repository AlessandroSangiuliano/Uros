/*
 * System call prototypes.
 *
 * DO NOT EDIT-- this file is automatically generated.
 * created from/home/slex/Scaricati/xMach-main/lites/server/kern/syscalls.master
 */

#if KERNEL
#include <nfs.h>
#include <sysvshm.h>
#include <map_uarea.h>
#include <ktrace.h>
#include <trace.h>
#endif
extern noreturn exit(int status);
extern pid_t fork(void);
extern size_t read(int fd, void *buf, size_t nbytes);
extern size_t write(int fd, const void *buf, size_t nbytes);
extern int open(const char *path, int flags, int mode);
extern int close(int fd);
extern pid_t wait4(pid_t pid, int *status, int options, struct rusage *rusage);
extern int creat(char *name, mode_t mode);
extern int link(const char *target, const char *linkname);
extern int unlink(const char *path);
extern int chdir(const char *path);
extern int fchdir(const char *path);
extern int mknod(const char *path, mode_t mode, dev_t dev);
extern int chmod(const char *path, mode_t mode);
extern int chown(const char *path, uid_t owner, gid_t group);
extern int brk(const char *addr);
extern int getfsstat(struct statfs *buf, long bufsize, int flags);
extern off_t lseek(int fd, off_t offset, int sbase);
extern pid_t getpid(void);
extern int mount(int type, const char *dir, int flags, void * data);
extern int unmount(const char *path, int flags);
extern int setuid(uid_t uid);
extern uid_t getuid(void);
extern uid_t geteuid(void);
extern int ptrace(int request, pid_t pid, int *addr, int data);
extern int recvmsg(int fd, struct msghdr *msg, int flags);
extern int sendmsg(int s, const struct msghdr *msg, int flags);
extern int recvfrom(int s, void *buf, int len, int flags, struct sockaddr *from, int *fromlen);
extern int accept(int s, struct sockaddr *addr, int *addrlen);
extern int getpeername(int s, struct sockaddr *name, int *namelen);
extern int getsockname(int s, struct sockaddr *name, int *namelen);
extern int access(const char *path, int amode);
extern int chflags(const char *path, int flags);
extern int fchflags(int fd, int flags);
extern int sync(void);
extern int kill(pid_t pid, int sig);
extern int stat(const char *path, struct stat *buf);
extern pid_t getppid(void);
extern int lstat(const char *path, struct stat *buf);
extern int dup(int fd);
extern int pipe(int fds[2]);
extern gid_t getegid(void);
extern int sigaction(int sig, const struct sigaction *act, struct sigaction *oact);
extern gid_t getgid(void);
extern int sigprocmask(int how, const sigset_t *set, sigset_t *oset);
extern char* getlogin(void);
extern int setlogin(const char *name);
extern int acct(const char *file);
#if MAP_UAREA
extern int sigpending(sigset_t *set);
#else
extern int sigpending(sigset_t *set);
#endif
#ifdef notyet
#else
#endif
extern int ioctl(int fd, unsigned int cmd, char *argp);
extern int reboot(int howto);
extern int revoke(char *fname);
extern int symlink(const char *oname, const char *nname);
extern int readlink(const char *path, char *buf, int bufsize);
extern int execve(const char *path, const char *argv[], const char *envp[]);
#if NMAP_UAREA
extern mode_t umask(mode_t mask);
#else
extern mode_t umask(mode_t mask);
#endif
extern int chroot(const char *dirname);
extern int fstat(int fd, struct stat *buf);
extern int getpagesize(void);
extern int msync(caddr_t addr, int len);
extern pid_t vfork(void);
extern caddr_t sbrk(int incr);
extern caddr_t mmap(caddr_t addr, size_t len, int prot, int flags, int fd, off_t offset);
extern int munmap(caddr_t addr, int len);
extern int mprotect(caddr_t addr, int len, int prot);
extern int madvise(caddr_t addr, int len, int behav);
extern int mincore(caddr_t addr, int len, char *vec);
extern int getgroups(u_int gidsetsize, int *gidset);
extern int setgroups(int gidsetsize, gid_t *gidset);
extern pid_t getpgrp(void);
extern int setpgid(pid_t pid, pid_t pgrp);
extern int setitimer(int which, struct itimerval *value, struct itimerval *ovalue);
extern int wait(void);
extern int swapon(const char *special);
extern int getitimer(int which, struct itimervalue *value);
extern int gethostname(char *name, int namelen);
extern int sethostname(const char *name, int namelen);
extern int getdtablesize(void);
extern int dup2(int ofd, int nfd);
extern int fcntl(int fd, int cmd, int arg);
extern int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);
extern int fsync(int fd);
extern int setpriority(int which, int who, int prio);
extern int socket(int domain, int type, int protocol);
extern int connect(int fd, const struct sockaddr *name, int namelen);
extern int getpriority(int which, int who);
extern int send(int s, char *msg, int len, int flags);
extern int recv(int s, char *buf, int len, int flags);
extern int sigreturn(struct sigcontext *scp);
extern int bind(int fd, const struct sockaddr *name, int namelen);
extern int setsockopt(int fd, int level, int optname, const void *optval, int optlen);
extern int listen(int fd, int backlog);
extern int sigvec(int sig, struct sigvec *vec, struct sigvec *ovec);
#if MAP_UAREA
#else
#endif
extern int sigsuspend(const sigset_t *sigmask);
extern int gettimeofday(struct timeval *tp, struct timezone *tzp);
extern int getrusage(int who, struct rusage *rusage);
extern int getsockopt(int fd, int level, int optname, void *optval, int *optlen);
extern int readv(int fd, struct iovec *iov, int iovcnt);
extern int writev(int fd, struct iovec *iov, int iovcnt);
extern int settimeofday(struct timeval *tp, struct timezone *tzp);
extern int fchown(int fd, uid_t owner, gid_t group);
extern int fchmod(int fd, mode_t mode);
extern int rename(const char *old, const char *new);
extern int truncate(const char *path, off_t length);
extern int ftruncate(int fd, off_t length);
extern int flock(int fd, int operation);
extern int mkfifo(const char *path, mode_t mode);
extern int sendto(int s, const void *msg, int len, int flags, const struct sockaddr *to, int tolen);
extern int shutdown(int fd, int how);
extern int socketpair(int domain, int type, int protocol, int *sv);
extern int mkdir(const char *path, mode_t mode);
extern int rmdir(const char *path);
extern int utimes(const char *file, const struct timeval *times);
extern int adjtime(struct timeval *delta, struct timeval *olddelta);
extern int gethostid(void);
extern int sethostid(int hostid);
#if MAP_UAREA
extern int getrlimit(int resource, struct rlimit *rlp);
#else
extern int getrlimit(int resource, struct rlimit *rlp);
#endif
extern int setrlimit(int resource, const struct rlimit *rlp);
extern pid_t setsid(void);
extern int quotactl(const char *path, int cmd, int id, char *addr);
extern int quota(int a1, int a2, int a3, int a4);
#if NFS
extern int nfssvc(int sock, struct sockaddr *mask, int mask_length, struct sockaddr *match, int match_length);
#else
#endif
extern int getdirentries(int fd, char *buf, int nbytes, long *basep);
extern int statfs(const char *path, struct statfs *buf);
extern int fstatfs(int fd, struct statfs *buf);
#if NFS
extern int getfh(const char *path, struct fhandle *fhp);
#else
#endif
extern int getdomainname(char *name, int namelen);
extern int setdomainname(const char *name, int namelen);
extern int uname(struct utsname *name);
#if SYSVSHM
extern int shmsys(int a1, int a2, int a3, int a4);
#else
#endif
extern int setgid(gid_t gid);
extern int setegid(gid_t egid);
extern int seteuid(uid_t euid);
extern int table(int id, int index, char *addr, int nel, u_int lel);
extern int sysctrace(pid_t pid);
extern int __sysctl(int *name, unsigned int namelen, void *old, size_t *oldlenp, void *new, size_t newlen);
